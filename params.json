{"name":"Mercenary","tagline":"An easier way to build your command-line scripts in Ruby.","body":"# Mercenary\r\n\r\nLightweight and flexible library for writing command-line apps in Ruby.\r\n\r\n[![Build Status](https://secure.travis-ci.org/jekyll/mercenary.png)](https://travis-ci.org/jekyll/mercenary)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'mercenary'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install mercenary\r\n\r\n**Note: Mercenary may not work with Ruby < 1.9.3.**\r\n\r\n## Usage\r\n\r\nCreating programs and commands with Mercenary is easy:\r\n\r\n```ruby\r\nMercenary.program(:jekyll) do |p|\r\n  p.version Jekyll::VERSION\r\n  p.description 'Jekyll is a blog-aware, static site generator in Ruby'\r\n  p.syntax \"jekyll <subcommand> [options]\"\r\n\r\n  p.command(:new) do |c|\r\n    c.syntax \"new PATH\" # do not include the program name or super commands\r\n    c.description \"Creates a new Jekyll site scaffold in PATH\"\r\n    c.option 'blank', '--blank', 'Initialize the new site without any content.'\r\n\r\n    c.action do |args, options|\r\n      Jekyll::Commands::New.process(args, blank: options['blank'])\r\n    end\r\n  end\r\n\r\n  p.command(:build) do |c|\r\n    c.syntax \"build [options]\"\r\n    c.description \"Builds your Jekyll site\"\r\n\r\n    c.option 'safe', '--safe', 'Run in safe mode'\r\n    c.option 'source', '--source DIR', 'From where to collect the source files'\r\n    c.option 'destination', '--dest DIR', 'To where the compiled files should be written'\r\n\r\n    c.action do |_, options|\r\n      Jekyll::Commands::Build.process(options)\r\n    end\r\n  end\r\n\r\n  # Bring in command bundled in external gem\r\n  begin\r\n    require \"jekyll-import\"\r\n    JekyllImport.init_with_program(p)\r\n  rescue LoadError\r\n  end\r\n\r\n  p.default_command(:build)\r\nend\r\n```\r\n\r\nAll commands have the following default options:\r\n\r\n- `-h/--help` - show a help message\r\n- `-v/--version` - show the program version\r\n- `-t/--trace` - show the full backtrace when an error occurs\r\n\r\n## API\r\n\r\n### `Mercenary`\r\n\r\n#### `.program`\r\n\r\nCreates and executes a program. Accepts two arguments:\r\n\r\n- `name` - program name as a Symbol\r\n- `block` - the specification for the program, passed the program instance as an\r\n  argument.\r\n\r\nExample is above, under the heading [Usage](#usage).\r\n\r\n### `Program`\r\n\r\n`Program` is a subclass of `Command`, so it has all of the methods documented\r\nbelow as well as those for `Command`.\r\n\r\n#### `#config`\r\n\r\nFetches the program configuration hash.\r\n\r\n### `Command`\r\n\r\n#### `#new`\r\n\r\nCreate a new command. Accepts two arguments:\r\n\r\n- `name` - the name of your command, as a symbol\r\n- `parent` - (optional) the parent Command\r\n\r\n#### `#version`\r\n\r\nSets or gets the version of the command. Accepts an optional argument:\r\n\r\n- `version` - (optional) the version to set for the command. If present, this\r\n  becomes the new version for the command and persists.\r\n\r\n#### `#syntax`\r\n\r\nSets or gets the syntax of the command. Built on parent syntaxes if a parent\r\nexists. Accepts one optional argument:\r\n\r\n- `syntax` - (optional) the syntax to set for the command. Will inherit from the\r\n  parent commands or program. Usually in the form of\r\n  `\"command_name <SUBCOMMAND> [OPTIONS]\"`\r\n\r\nWhen a parent command exists, say `supercommand`, with syntax set as\r\n`supercommand <SUBCOMMAND> [OPTIONS]`, the syntax of the command in question\r\nwill be `supercommand command_name <SUBCOMMAND> [OPTIONS]` with both\r\n`<SUBCOMMAND>` and `[OPTIONS]` stripped out. Any text between `<` and `>` or\r\nbetween `[` and `]` will be stripped from parent command syntaxes. The purpose\r\nof this chaining is to reduce redundancy.\r\n\r\n#### `#description`\r\n\r\nSets or gets the description of the command. Accepts one optional argument:\r\n\r\n- `desc` - (optional) the description to set for the command. If\r\n  provided, will override any previous description set for the command.\r\n\r\n#### `#default_command`\r\n\r\nSets or gets the default subcommand of the command to execute in the event no\r\nsubcommand is passed during execution. Accepts one optional argument:\r\n\r\n- `command_name` - (optional) the `Symbol` name of the subcommand to be\r\n  executed. Raises an `ArgumentError` if the subcommand doesn't exist.\r\n  Overwrites previously-set default commands.\r\n\r\n#### `#option`\r\n\r\nAdds a new option to the command. Accepts many arguments:\r\n\r\n- `config_key` - the configuration key that the value of this option maps to.\r\n- `*options` - all the options, globbed, to be passed to `OptionParser`, namely the\r\n  switches and the option description. Usually in the format\r\n  `\"-s\", \"--switch\", \"Sets the 'switch' flag\"`.\r\n\r\nValid option calls:\r\n\r\n```ruby\r\ncmd.option 'config_key', '-c', 'Sets the \"config\" flag'\r\ncmd.option 'config_key', '--config', 'Sets the \"config\" flag'\r\ncmd.option 'config_key', '-c', '--config', 'Sets the \"config\" flag.'\r\ncmd.option 'config_key', '-c FILE', '--config FILE', 'The config file.'\r\ncmd.option 'config_key', '-c FILE1[,FILE2[,FILE3...]]', '--config FILE1[,FILE2[,FILE3...]]', Array, 'The config files.'\r\n```\r\n\r\nNotice that you can specify either a short switch, a long switch, or both. If\r\nyou want to accept an argument, you have to specify it in the switch strings.\r\nThe class of the argument defaults to `String`, but you can optionally set a\r\ndifferent class to create, e.g. `Array`, if you are expecting a particular class\r\nin your code from this option's value. The description is also optional, but\r\nit's highly recommended to include a description.\r\n\r\n#### `#alias` \r\n\r\nSpecifies an alias for this command such that the alias may be used in place of\r\nthe command during execution. Accepts one argument:\r\n\r\n- `cmd_name` - the alias name for this command as a `Symbol`\r\n\r\nExample:\r\n\r\n```ruby\r\ncmd.alias(:my_alias)\r\n# Now `cmd` is now also executable via \"my_alias\"\r\n```\r\n\r\n#### `#action`\r\n\r\nSpecifies a block to be executed in the event the command is specified at\r\nruntime. The block is given two arguments:\r\n\r\n- `args` - the non-switch arguments given from the command-line\r\n- `options` - the options hash built via the switches passed\r\n\r\n**Note that actions are additive**, meaning any new call to `#action` will\r\nresult in another action to be executed at runtime. Actions will be executed in\r\nthe order they are specified in.\r\n\r\nExample:\r\n\r\n```ruby\r\ncmd.action do |args, options|\r\n  # do something!\r\nend\r\n```\r\n\r\n#### `#logger`\r\n\r\nAccess the logger for this command. Useful for outputting information to STDOUT.\r\nAccepts one optional argument:\r\n\r\n- `level` - (optional) the severity threshold at which to begin logging. Uses\r\n  Ruby's built-in\r\n  [`Logger`](http://www.ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html)\r\n  levels.\r\n\r\nLog level defaults to `Logger::INFO`.\r\n\r\nExamples:\r\n\r\n```ruby\r\ncmd.logger(Logger::DEBUG)\r\ncmd.logger.debug \"My debug message.\"\r\ncmd.logger.info \"My informative message.\"\r\ncmd.logger.warn \"ACHTUNG!!\"\r\ncmd.logger.error \"Something terrible has happened.\"\r\ncmd.logger.fatal \"I can't continue doing what I'm doing.\"\r\n```\r\n\r\n#### `#command`\r\n\r\nCreates a new subcommand for the current command. Accepts two arguments:\r\n\r\n- `cmd_name` - the command name, as a Symbol\r\n- `block` -  the specification of the subcommand in a block\r\n\r\nExample:\r\n\r\n```ruby\r\nmy_command.command(:my_subcommand) do |subcmd|\r\n  subcmd.description 'My subcommand'\r\n  subcmd.syntax 'my_subcommand [OPTIONS]'\r\n  # ...\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}